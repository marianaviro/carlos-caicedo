---
const props = Astro.props;
const height = props.size === "full" ? " min-h-[82vh]" : " pt-8";
const textColor = props.image
  ? " text-white"
  : props.theme === "dark"
  ? " text-white"
  : " text-black";
const borderColor = props.image
  ? " text-white"
  : props.theme === "dark"
  ? " border-white"
  : " border-black";
const bgColor = props.theme === "dark" ? " bg-black" : " bg-white";
const bgPicture = props.image ? " picture" : "";
---

<div {...props} class="relative">
  <div
    class={"absolute -z-50 w-full h-full" + bgColor + bgPicture}
    style={`background-image: url("${props.image}")`}
  >
  </div>
  <div class={"max-w-full flex flex-col items-center" + height}>
    <div class={"py-12 wrapper flex flex-col justify-center" + height}>
      <div class="pt-24 md:pt-14 px-4">
        <div class={"text-left md:text-center" + textColor}>
          <h1
            class="pb-4 font-display text-[3.5rem] mobile-medium:text-[3.8rem] md:text-[4rem] lg:text-[4.5rem] xl:text-[5rem] leading-[0.9]"
          >
            {props.title}
          </h1>
          {
            props.subtitle && (
              <h3 class="py-4 text-base uppercase tracking-wider leading-tight italic">
                {props.subtitle}
              </h3>
            )
          }
        </div>
      </div>
      {
        props.author && (
          <div class="pb-6 px-4">
            <div
              class={
                "text-left md:text-center italic text-base tracking-wide font-sans" +
                textColor
              }
            >
              <p>
                Por:
                {props.author.map((aut, i) => {
                  const route = aut
                    .normalize("NFD")
                    .replace(/[\u0300-\u036f]/g, "")
                    .toLowerCase()
                    .split(" ")
                    .join("-");
                  const comma = i !== 0 ? "," : "";
                  return (
                    <span>
                      {comma}
                      <a
                        href={"/equipo#" + route}
                        class={
                          "underline underline-offset-4 decoration-dotted decoration-2 hover:text-orange hover:decoration-solid" +
                          textColor
                        }
                      >
                        {aut}
                      </a>
                    </span>
                  );
                })}
              </p>
            </div>
          </div>
        )
      }
      {
        props.tags && (
          <div class="pt-4 px-4">
            <div class="flex flex-wrap justify-start md:justify-center">
              {props.tags.map((tag) => {
                const tagRoute = tag
                  .normalize("NFD")
                  .replace(/[\u0300-\u036f]/g, "")
                  .toLowerCase()
                  .split(" ")
                  .join("-");
                return (
                  <a
                    href={"/contenidos?" + tagRoute}
                    class={
                      "mr-2 mb-2 px-2 font-sans text-xs md:text-sm uppercase tracking-wider italic border-[1.5px] hover:text-orange hover:border-orange" +
                      textColor +
                      borderColor
                    }
                  >
                    {tag}
                  </a>
                );
              })}
            </div>
          </div>
        )
      }
    </div>
  </div>
</div>
<style>
  .picture {
    background-size: cover;
    background-position: center;
  }
</style>
